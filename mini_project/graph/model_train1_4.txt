loss, acc:  0.5368186831474304 0.675000011920929
datagen = ImageDataGenerator(zoom_range = [0.5, 1.0],          # 랜덤하게 줌, 아웃
                             rescale = 1. / 255,
                             brightness_range = [0.2, 1.0],    # 이미지 발기
                             rotation_range = 90,              # 랜덤한 각도로 돌리기
                             horizontal_flip = True,           # 위, 아래, 오른쪽, 왼쪽 뒤집기
                             vertical_flip = True,             
                             height_shift_range = 0.3,         # 위, 아래 움직임 
                             width_shift_range = 0.3,          # 오른쪽, 왼쪽 움직임
                            )

datagen_val = ImageDataGenerator(rescale = 1. / 255)

x_train = datagen.flow_from_directory( train_path,
                                target_size = (256, 256),
                                batch_size = 30,
                                class_mode = 'categorical')

x_val = datagen_val.flow_from_directory( train_path,
                                target_size = (256, 256),
                                batch_size = 30,
                                class_mode = 'categorical')

x_test = datagen.flow_from_directory( test_path,
                                target_size = (256, 256),
                                batch_size = 4,                
                                class_mode = 'categorical')

#2. model
model = Sequential()
model.add(Conv2D(50, (5, 5), input_shape= ( 256, 256, 3), padding = 'same', activation = 'relu'))
model.add(MaxPooling2D(pool_size = 5))
model.add(Dropout(0.3))
model.add(Conv2D(100, (5, 5), padding = 'same', activation = 'relu'))
model.add(MaxPooling2D(pool_size = 5))
model.add(Dropout(0.5))
model.add(Conv2D(120, (5, 5), padding = 'same', activation = 'relu'))
model.add(MaxPooling2D(pool_size = 5))
model.add(Dropout(0.5))
model.add(Conv2D(90, (5, 5), padding = 'same', activation = 'relu'))
model.add(Dropout(0.5))
model.add(Flatten())
model.add(Dense(50, activation = 'relu'))
model.add(Dropout(0.3))
model.add(Dense(10, activation = 'softmax'))

model.summary()

es = EarlyStopping(monitor = 'val_loss', patience = 100)

model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['acc'])
hist = model.fit_generator(x_train, epochs = 400, 
                           steps_per_epoch= 50,                       # 한 세대하다 몇번 생성기로부터 데이터를 얻을 것이가                 
                           validation_data= x_val,                   # validation_data 설정
                           validation_steps= 10,                    # [validation data수/배치사이즈]
                           callbacks= [es],
                           verbose = 2)